plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.2"
    id 'com.diffplug.spotless' version '7.2.1'
    id "com.peterabeles.gversion" version "1.10.3"
    id "jacoco"
    id "org.sonarqube" version "6.2.0.5505"
    id "checkstyle"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    // Enable VisualVM connection
                    jvmArgs.add("-Dcom.sun.management.jmxremote=false")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.port=1198")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                    jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                    jvmArgs.add("-Djava.rmi.server.hostname=10.67.31.2")
                    // Enable automatic heap dumps on OutOfMemoryError
                    jvmArgs.add("-XX:+HeapDumpOnOutOfMemoryError")
                    jvmArgs.add("-XX:HeapDumpPath=/home/lvuser/frc-usercode.hprof")

                    //jvmArgs.add("-Xmx4M")
                    //jvmArgs.add("-Xss128K")
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false // Change to true to delete files on roboRIO that no
                    // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

task(tuning, type: JavaExec) {
    mainClass = "build.utils.tuning.Main"
    classpath = sourceSets.main.runtimeClasspath
    systemProperty 'java.library.path', "${project.buildDir}/jni/release"
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    forkEvery = 1
    maxParallelForks = Runtime.runtime.availableProcessors()
}

tasks.test {
    // Don't run tests as part of the default build
    onlyIf { gradle.startParameter.taskNames.contains("test") }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

sonar {
    properties {
        property "sonar.projectKey", "recordrobotics_SwerveDriveBase"
        property "sonar.organization", "recordrobotics"
    }
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = false
wpi.sim.addDriverstation().defaultEnabled = true

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

checkstyle {
    toolVersion = "11.0.0"
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        "configDirectory": file("${rootDir}/config/checkstyle").absolutePath
    ]
}

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude 'build/**', '**/build-*/**', 'src/main/java/frc/robot/Main.java', '**/BuildConstants.java' // Main has ascii art, don't touch
        }

        toggleOffOn()
        trimTrailingWhitespace()
        endWithNewline()

        cleanthat()
                .groupArtifact('org.recordrobotics.cleanthat:java')
                .version("2.26")
                .sourceCompatibility("17")
                .addMutator("UseExplicitTypes")
                .addMutator('SafeAndConsensual')
                .addMutator('UnnecessaryFullyQualifiedName')
                .excludeMutator('LocalVariableTypeInference')
                .includeDraft(false)

        removeUnusedImports()

        palantirJavaFormat()
        formatAnnotations()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'xml', {
        target fileTree('.') {
            include '**/*.xml'
            exclude '**/build/**', '**/build-*/**'
        }
        eclipseWtp('xml')
        trimTrailingWhitespace()
        leadingTabsToSpaces(2)
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        leadingTabsToSpaces(2)
        endWithNewline()
    }
}

project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir       = "src/main/java/"
    classPackage = "frc.robot"
    className    = "BuildConstants"
    dateFormat   = "yyyy-MM-dd HH:mm:ss z"
    timeZone     = "America/New_York" // Use preferred time zone
    indent       = "  "
}
